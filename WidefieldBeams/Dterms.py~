from sympy import *
init_printing(use_unicode=True)
from sympy.physics.quantum import TensorProduct

# Elements of the widefield antenna matrix
Axa,Axb,Aya,Ayb = symbols('A_xa A_xb A_ya A_yb')
Ax,Ay = symbols('A_x A_y')
# Coherency vector in stokes basis
I,Q,U,V = symbols('I Q U V')
Ex,Ey = symbols('E_x,E_y')

E = Matrix([Ex,Ey])
Econj = Matrix([conjugate(Ex),conjugate(Ey)])
# Go from Stokes to coherency, drop the usual factor of 1/2
S = Matrix([[1,1,0,0],[0,0,1,1j],[0,0,1,-1j],[1,-1,0,0]])
# Go from coherency to Stokes
Sinv = Matrix.inv(S)

V_S = Matrix([I, Q, U, V])
V_C = TensorProduct(E,Econj)

A = Matrix([[Axa,Axb],[Aya,Ayb]])

Adiag = Matrix([[Axa,0],[0,Ayb]])

AA = TensorProduct(A,A)

AAdiag = TensorProduct(Adiag,Adiag)

theta,phi = symbols('theta phi')

# Wrong-o 
#Dxt = cos(phi)*cos(theta)
#Dxp = -sin(phi)
#Dyt = sin(phi)*cos(theta)
#Dyp = cos(phi)

#D = Matrix([[Dxt,Dxp],[Dyt,Dyp]])
#DD = TensorProduct(D,D)

nom_stokes = simplify(AA*S*V_S)

print latex(nom_stokes)
print

nom_vis = simplify(Sinv*nom_stokes)

print(latex(nom_vis))

